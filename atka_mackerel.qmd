---
title: "Atka mackerel"
#format: html
editor: visual
format:
  html: 
    page-layout: full
    fig-format: svg
    fig-dpi: 400
    fig-width: 80
    fig-height: 50
---

## *Background*

*The Groundfish Assessment Program is migrating to new database tables (housed in the `GAP_PRODUCTS` schema) starting in the 2024 groundfish stock assessment cycle. Here we compare AI bottom trawl survey (BTS) biomass, age compositions, and size compositions for Atka mackerel.*

*Original data 1990-present were accessed from AKFIN Answers and can be found in the following locations: [AI - Biomass by NMFS Reporting Area](https://akfinbi.psmfc.org/analytics/saw.dll?Dashboard&PortalPath=%2fshared%2fStock%20Assessment%2f_portal%2fStock%20Assessment&Page=RACE%20-%20Biomass%20by%20NMFS%20Reporting%20Area&Done=Dashboard%26PortalPath%3d%252fshared%252fStock%2520Assessment%252f_portal%252fStock%2520Assessment%26Page%3dRACE%2520Survey%2520%26ViewState%3dcuqp32sistc80nf87p6k1jq1nq), [AI - Age Composition Totals](https://akfinbi.psmfc.org/analytics/saw.dll?Dashboard&PortalPath=%2fshared%2fStock%20Assessment%2f_portal%2fStock%20Assessment&Page=RACE%20-%20Age%20Composition%20Totals%20AI&Done=Dashboard%26PortalPath%3d%252fshared%252fStock%2520Assessment%252f_portal%252fStock%2520Assessment%26Page%3dRACE%2520Survey%2520%26ViewState%3d752f0ie7rs5d0hauh43vtt5paq), [Size Composition by Stratum - AI](https://akfinbi.psmfc.org/analytics/saw.dll?Dashboard&PortalPath=%2fshared%2fStock%20Assessment%2f_portal%2fStock%20Assessment&Page=RACE%20-%20Length%20Frequencies%20by%20Depth%20Stratum&Done=Dashboard%26PortalPath%3d%252fshared%252fStock%2520Assessment%252f_portal%252fStock%2520Assessment%26Page%3dRACE%2520Survey%2520%26ViewState%3de4cvvmuoeadsk0of0g1j9dhpv6).*

## *Setup*

```{r}
#| output: false

libs <- c("tidyverse", "odbc", "keyring", "dbplyr", "kableExtra", "ggridges", "janitor")
if(length(libs[which(libs %in% rownames(installed.packages()) == FALSE )]) > 0) {
  install.packages(libs[which(libs %in% rownames(installed.packages()) == FALSE)])}
lapply(libs, library, character.only = TRUE)

theme_set(theme_bw(base_size = 15) + 
            theme(panel.border = element_blank(), 
                  panel.grid.major = element_blank(),
                  panel.grid.minor = element_blank(), 
                  axis.line = element_line(colour = "black")))

akfin <- DBI::dbConnect(odbc::odbc(), "akfin", uid = keyring::key_list("akfin")$username, 
                        pwd = keyring::key_get("akfin", keyring::key_list("akfin")$username))

```

## *Species codes*

*This is the RACE `species_code`* for Atka mackerel.

```{r}
#| output: false
my_spp_codes <- 21921

```

## *New area IDs*

\*Instead of hosting various survey data in different database tables, the new `GAP_PRODUCTS` uses `SURVEY_DEFINITION_ID` and `TYPE` to identify the survey and the structure or aggregation of data desired by the user. For example, in the Atka mackerel assessment, we pull biomass data at the regulatory area level.

```{r}
lkup <- dplyr::tbl(akfin, dplyr::sql('gap_products.akfin_area')) %>% 
  dplyr::left_join(dplyr::tbl(akfin, dplyr::sql('gap_products.akfin_survey_design')) %>% 
                     dplyr::distinct(SURVEY, SURVEY_DEFINITION_ID),
                   by = join_by(SURVEY_DEFINITION_ID)) %>% 
  dplyr::rename_all(tolower) %>% 
  dplyr::filter(survey %in% c('AI')) %>% 
  dplyr::collect()

lkup %>% 
  distinct(survey, type) %>% 
  arrange(survey, type) %>% 
  kableExtra::kable("html") %>% 
    kableExtra::kable_styling() %>% 
    kableExtra::scroll_box(width = "100%", height = "200px")
```

*AI BTS:*

```{r}
ai_area_ids <- lkup %>% filter(survey == 'AI' & type == "REGULATORY AREA") 
ai_area_ids %>% 
  distinct(survey_definition_id, area_id, type, area_name) %>% 
  kableExtra::kable("html") %>% 
    kableExtra::kable_styling() %>% 
    kableExtra::scroll_box(width = "100%", height = "200px")
ai_area_ids <- ai_area_ids %>% pull(area_id)
```

*AI BTS for age comps*

```{r}
aiage_area_ids <- lkup %>% filter(survey == 'AI' & type == "REGION") 
aiage_area_ids %>% 
  distinct(survey_definition_id, area_id, type, area_name, depth_min_m, depth_max_m) %>% 
  kableExtra::kable("html") %>% 
    kableExtra::kable_styling() %>% 
    kableExtra::scroll_box(width = "100%", height = "200px")
aiage_area_ids <- aiage_area_ids %>% pull(area_id)
```

*AI BTS for size comps*

```{r}
ailen_area_ids <- lkup %>% filter(survey == 'AI' & type == "STRATUM") 
ailen_area_ids %>% 
  distinct(survey_definition_id, area_id, type, area_name, depth_min_m, depth_max_m) %>% 
  kableExtra::kable("html") %>% 
    kableExtra::kable_styling() %>% 
    kableExtra::scroll_box(width = "100%", height = "200px")
ailen_area_ids <- ailen_area_ids %>% pull(area_id)
```

## *Compare AI BTS biomass*

### *Old data from Answers:*

```{r}
oldai <- read_csv('data/answers_atka_nmfsarea_biomass.csv') %>% 
  janitor::clean_names() %>%
  dplyr::select(area_name = nmfs_reporting_area, area_id = summary_area, 
                species_code, year, biomass_mt = area_biomass, 
                biomass_var = area_biomass_var)
```

```{r}
#| echo: false
oldai %>% kableExtra::kable("html") %>% 
  kableExtra::kable_styling() %>% 
  kableExtra::scroll_box(width = "100%", height = "200px")
```

### *New query:*

```{r}
newai <- dplyr::tbl(akfin, dplyr::sql('gap_products.akfin_biomass')) %>% 
  dplyr::rename_all(tolower) %>% 
  dplyr::select(survey_definition_id, area_id, species_code, year, biomass_mt, biomass_var) %>% 
  dplyr::filter(species_code %in% my_spp_codes & area_id %in% ai_area_ids & year >= 1991) %>% 
  dplyr::collect() %>% 
  dplyr::left_join(lkup %>% select(survey_definition_id, area_id, area_name))
```

```{r}
#| echo: false
newai %>% kableExtra::kable("html") %>% 
  kableExtra::kable_styling() %>% 
  kableExtra::scroll_box(width = "100%", height = "200px")
```

### *Combine data sets by species and with all species combined:*

```{r}

compareai <- newai %>% 
  mutate(schema = "akfin.gap_products") %>% 
  select(schema, year, area_name, area_id, species_code, biomass_mt, biomass_var) %>% 
  bind_rows(oldai %>% 
              mutate(schema = "akfin.afsc") %>% 
              select(schema, year, area_name, area_id, species_code, biomass_mt, biomass_var)) %>% 
  mutate(cv = ifelse(biomass_mt > 0, sqrt(biomass_var) / biomass_mt, NA))

compareai_combined <- compareai %>% 
  group_by(schema, year, area_name, area_id) %>% 
  summarise(biomass_mt = sum(biomass_mt, na.rm = TRUE),
            biomass_var = sum(biomass_var, na.rm = TRUE)) %>% 
  ungroup() %>% 
  mutate(cv = ifelse(biomass_mt > 0, sqrt(biomass_var) / biomass_mt, NA))
```

### *Species-specific comparisons:*

AI BTS Biomass (+/- 1 SD), red = old data, blue = new data:

```{r,fig.width=13,fig.height=11}
#| echo: false
ggplot(compareai, aes(x = factor(year), y = biomass_mt, fill = schema)) +
  geom_bar(stat = 'identity', position = position_dodge2(width = 0.5, preserve = "single", padding = 0)) +
  geom_errorbar(aes(ymin = biomass_mt - sqrt(biomass_var), ymax = biomass_mt + sqrt(biomass_var)),
                position = position_dodge2(width = 0.5, preserve = "single", padding = 0)) +
  facet_grid(species_code~area_name, scale = 'free_y') +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  labs(x = NULL)

```

```{r}
#| echo: false
output <- compareai %>% 
  pivot_wider(id_cols = c(year, area_name, species_code), names_from = schema, values_from = biomass_mt, values_fill = 0) %>% 
  mutate(percent_change = (akfin.gap_products-akfin.afsc)/akfin.afsc * 100,
         difference = akfin.gap_products-akfin.afsc,
         variable = 'mean') %>% 
  bind_rows(compareai %>% 
              pivot_wider(id_cols = c(year, area_name, species_code), names_from = schema, values_from = cv, values_fill = 0) %>% 
              mutate(percent_change = (akfin.gap_products-akfin.afsc)/akfin.afsc * 100,
                     difference = akfin.gap_products-akfin.afsc,
                     variable = 'cv')) %>% 
  arrange(desc(variable), desc(abs(difference))) %>%   left_join(bsai_orox_codes_df %>% select(species_code, common_name)) 
```

Comparison of biomass point estimates, largest differences shown first:

```{r}
#| echo: false
output %>%
  filter(variable == 'mean') %>% 
 kableExtra::kable("html") %>% 
  kableExtra::kable_styling() %>% 
  kableExtra::scroll_box(width = "100%", height = "200px")
```

Comparison of biomass CVs, largest differences shown first:

```{r}
#| echo: false
output %>%
  filter(variable == 'cv') %>% 
 kableExtra::kable("html") %>% 
  kableExtra::kable_styling() %>% 
  kableExtra::scroll_box(width = "100%", height = "200px")
```

## AI BTS age comps

### *Old data from Answers:*

```{r}
oldaiage <- read_csv('data/answers_atka_agecomps.csv') %>% 
  janitor::clean_names() %>%
  dplyr::select(species_code, year, biomass_mt = area_biomass, 
                biomass_var = area_biomass_var)
```

### *New query:*

## AI BTS lengths

Due to sample size limitations, length frequency data are only presented for dusky rockfish (30152) and shortspine thornyhead (30020) in the BSAI other rockfish stock assessment. Additionally, length data are only presented from the AI BTS.

```{r}
my_spp_codes <- c(30152, 30020)
```

### *Old data from Answers:*

```{r}
#| output: false
# assessment query pulls length data by depth stratum - not sure this is
# necessary, other than i don't see a subarea option... but sticking to status quo
oldailen <- dplyr::tbl(akfin, dplyr::sql('afsc.race_sizestratumaigoa')) %>%
  dplyr::rename_all(tolower) %>% 
  dplyr::select(survey, year, stratum, species_code, length, population_count = total) %>% 
  dplyr::filter(survey == "AI" & species_code %in% my_spp_codes & year >= 1991) %>% 
  dplyr::left_join(dplyr::tbl(akfin, dplyr::sql('afsc.race_goastrataaigoa')) %>% 
                     dplyr::rename_all(tolower) %>% 
                     dplyr::filter(survey == "AI") %>% 
                     dplyr::distinct(survey, area_id = summary_area, stratum, area_name = inpfc_area)) %>%  
  dplyr::collect()
```

```{r}
#| echo: false
#| output: false
oldailen %>% kableExtra::kable("html") %>% 
  kableExtra::kable_styling() %>% 
  kableExtra::scroll_box(width = "100%", height = "200px")
```

### *New query:*

```{r}
#| output: false
newailen <- dplyr::tbl(akfin, dplyr::sql('gap_products.akfin_sizecomp')) %>% 
  dplyr::rename_all(tolower) %>% 
  dplyr::select(survey_definition_id, area_id, species_code, year, length = length_mm, sex, population_count) %>% 
  dplyr::filter(survey_definition_id == 52 & 
                  species_code %in% my_spp_codes & 
                  area_id %in% ailen_area_ids & 
                  year >= 1991) %>% 
  dplyr::collect() %>% #nrow
  dplyr::left_join(lkup %>% 
                     filter(survey == 'AI' & area_id %in% ailen_area_ids & type == 'SUBAREA BY DEPTH') %>% #
                     distinct(survey_definition_id, area_id, area_name), 
                   by = join_by(survey_definition_id, area_id))

# area_id 793 and 794 are used for both type == `STRATUM` and type == `SUBAREA
# BY DEPTH` which means you can't just join by survey_definition_id and
# area_id...
# lkup %>% filter(survey == 'AI' & area_id %in% c(793, 794)) %>% distinct()

```

```{r}
#| echo: false
#| output: false
newailen %>% kableExtra::kable("html") %>%
  kableExtra::kable_styling() %>% 
  kableExtra::scroll_box(width = "100%", height = "200px")
```

### *Combine data sets by species and with all species combined:*

```{r}
names(oldailen);
names(newailen)

compareailens <- newailen %>% 
  mutate(survey = "AI",
         schema = "akfin.gap_products") %>% 
  select(survey, schema, species_code, area_name, year, length, population_count) %>% 
  bind_rows(oldailen %>% 
              mutate(schema = "akfin.afsc") %>% 
              select(survey, schema, species_code, area_name, year, length, population_count)) %>% 
  group_by(survey, schema, species_code, area_name, year, length) %>% 
  summarise(population_count = sum(population_count))

dusky <- compareailens %>% filter(species_code == 30152)
sst <- compareailens %>% filter(species_code == 30020)
```

### *Length frequency comparisons:*

```{r,fig.width=14,fig.height=8}
#| echo: false
ggplot(dusky, aes(x = length, y = factor(year), height = population_count, fill = schema)) +
  geom_density_ridges(stat = "identity", scale = 4, alpha = 0.5) +
  theme(legend.position = "top") +
  facet_wrap(~area_name) +
labs(y = NULL, title = "AI dusky rockfish") 
```

Thornyhead rockfish:

```{r,fig.width=14,fig.height=8}
#| echo: false
ggplot(sst, aes(x = length, y = factor(year), height = population_count, fill = schema)) +
  geom_density_ridges(stat = "identity", scale = 4, alpha = 0.5) +
  theme(legend.position = "top") +
  facet_wrap(~area_name) +
  labs(y = NULL, title = "AI shortspine thornyhead")
```

It looks like everything matches up for length comps except there are more shortspines in the SBS in the `gap_products` schema than in the old `afsc` schema.
